{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.List = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = \"src/basic/List.js\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _nativeBaseShoutemTheme = require(\"native-base-shoutem-theme\");\n\nvar _SwipeRow = require(\"./SwipeRow\");\n\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar List = function (_Component) {\n  _inherits(List, _Component);\n\n  function List(props) {\n    _classCallCheck(this, List);\n\n    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));\n\n    _this._rows = {};\n    _this.openCellId = null;\n\n    if (props.dataArray && props.renderRow) {\n      var rowHasChanged = props.rowHasChanged || function (r1, r2) {\n        return r1 !== r2;\n      };\n\n      var ds = new _reactNative.ListView.DataSource({\n        rowHasChanged: rowHasChanged\n      });\n      _this.state = {\n        dataSource: ds.cloneWithRows(props.dataArray)\n      };\n    } else {\n      _this.state = {};\n    }\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.state.dataSource) {\n        this.setState({\n          dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray)\n        });\n      }\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var childrenArray = _react2.default.Children.map(this.props.children, function (child) {\n        return child;\n      });\n\n      return childrenArray;\n    }\n  }, {\n    key: \"setScrollEnabled\",\n    value: function setScrollEnabled(enable) {\n      this._listView.setNativeProps({\n        scrollEnabled: enable\n      });\n    }\n  }, {\n    key: \"safeCloseOpenRow\",\n    value: function safeCloseOpenRow() {\n      if (this._rows[this.openCellId]._root) {\n        this._rows[this.openCellId]._root.closeRow();\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureBegan\",\n    value: function rowSwipeGestureBegan(id) {\n      if (this.props.closeOnRowBeginSwipe && this.openCellId && this.openCellId !== id) {\n        this.safeCloseOpenRow();\n      }\n    }\n  }, {\n    key: \"onRowOpen\",\n    value: function onRowOpen(secId, rowId, rowMap) {\n      var cellIdentifier = \"\" + secId + rowId;\n\n      if (this.openCellId && this.openCellId !== cellIdentifier) {\n        this.safeCloseOpenRow();\n      }\n\n      this.openCellId = cellIdentifier;\n      this.props.onRowOpen && this.props.onRowOpen(secId, rowId, rowMap);\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress(id) {\n      if (this.openCellId) {\n        if (this.props.closeOnRowPress) {\n          this.safeCloseOpenRow();\n          this.openCellId = null;\n        }\n      }\n    }\n  }, {\n    key: \"closeRow\",\n    value: function closeRow(id) {\n      if (this.openCellId) {\n        if (this.props.closeOnRowPress) {\n          this.safeCloseOpenRow();\n          this.openCellId = null;\n        }\n      }\n    }\n  }, {\n    key: \"openLeftRow\",\n    value: function openLeftRow(id) {\n      this._rows[id]._root.openLeftRow();\n    }\n  }, {\n    key: \"openRightRow\",\n    value: function openRightRow(id) {\n      this._rows[id]._root.openRightRow();\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(e) {\n      if (this.openCellId) {\n        if (this.props.closeOnScroll) {\n          this.safeCloseOpenRow();\n          this.openCellId = null;\n        }\n      }\n\n      this.props.onScroll && this.props.onScroll(e);\n    }\n  }, {\n    key: \"setRefs\",\n    value: function setRefs(ref) {\n      this._listView = ref;\n      this.props.listViewRef && this.props.listViewRef(ref);\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(rowData, secId, rowId, rowMap) {\n      var _this2 = this;\n\n      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);\n      return _react2.default.createElement(_SwipeRow.SwipeRow, {\n        list: true,\n        ref: function ref(row) {\n          return _this2._rows[\"\" + secId + rowId] = row;\n        },\n        swipeGestureBegan: function swipeGestureBegan(_) {\n          return _this2.rowSwipeGestureBegan(\"\" + secId + rowId);\n        },\n        onRowOpen: function onRowOpen(_) {\n          return _this2.onRowOpen(secId, rowId, _this2._rows);\n        },\n        onRowDidOpen: function onRowDidOpen(_) {\n          return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(secId, rowId, _this2._rows);\n        },\n        onRowClose: function onRowClose(_) {\n          return _this2.props.onRowClose && _this2.props.onRowClose(secId, rowId, _this2._rows);\n        },\n        onRowDidClose: function onRowDidClose(_) {\n          return _this2.props.onRowDidClose && _this2.props.onRowDidClose(secId, rowId, _this2._rows);\n        },\n        onRowPress: function onRowPress(_) {\n          return _this2.onRowPress(\"\" + secId + rowId);\n        },\n        openLeftRow: function openLeftRow(_) {\n          return _this2.openLeftRow(\"\" + secId + rowId);\n        },\n        openRightRow: function openRightRow(_) {\n          return _this2.openRightRow(\"\" + secId + rowId);\n        },\n        closeRow: function closeRow(_) {\n          return _this2.closeRow(\"\" + secId + rowId);\n        },\n        setScrollEnabled: function setScrollEnabled(enable) {\n          return _this2.setScrollEnabled(enable);\n        },\n        leftOpenValue: this.props.leftOpenValue,\n        rightOpenValue: this.props.rightOpenValue,\n        closeOnRowPress: this.props.closeOnRowPress,\n        disableLeftSwipe: this.props.disableLeftSwipe,\n        disableRightSwipe: this.props.disableRightSwipe,\n        stopLeftSwipe: this.props.stopLeftSwipe,\n        stopRightSwipe: this.props.stopRightSwipe,\n        recalculateHiddenLayout: this.props.recalculateHiddenLayout,\n        style: this.props.swipeRowStyle,\n        preview: (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId,\n        previewDuration: this.props.previewDuration,\n        previewOpenValue: this.props.previewOpenValue,\n        tension: this.props.tension,\n        friction: this.props.friction,\n        directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,\n        swipeToOpenPercent: this.props.swipeToOpenPercent,\n        left: this.props.renderLeftHiddenRow && this.props.renderLeftHiddenRow(rowData, secId, rowId, this._rows),\n        right: this.props.renderRightHiddenRow && this.props.renderRightHiddenRow(rowData, secId, rowId, this._rows),\n        body: this.props.renderRow && this.props.renderRow(rowData, secId, rowId, this._rows),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.props.renderLeftHiddenRow || this.props.renderRightHiddenRow) {\n        return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {\n          ref: function ref(_ref) {\n            _this3.setRefs(_ref);\n\n            _this3._root = _ref;\n          },\n          enableEmptySections: true,\n          onScroll: function onScroll(e) {\n            return _this3.onScroll(e);\n          },\n          renderRow: function renderRow(rowData, secId, rowId) {\n            return _this3.renderRow(rowData, secId, rowId, _this3._rows);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          }\n        }));\n      } else if (this.state.dataSource) {\n        return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {\n          ref: function ref(_ref2) {\n            return _this3._root = _ref2;\n          },\n          enableEmptySections: true,\n          dataSource: this.state.dataSource,\n          renderRow: this.props.renderRow,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          }\n        }));\n      }\n\n      return _react2.default.createElement(_reactNative.View, _extends({\n        ref: function ref(c) {\n          return _this3._root = c;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        }\n      }), this.renderChildren());\n    }\n  }]);\n\n  return List;\n}(_react.Component);\n\nList.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowBeginSwipe: false,\n  closeOnScroll: true,\n  closeOnRowPress: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  previewFirstRow: false,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50\n};\nvar StyledList = (0, _nativeBaseShoutemTheme.connectStyle)(\"NativeBase.List\", {}, _mapPropsToStyleNames2.default)(List);\nexports.List = StyledList;","map":{"version":3,"sources":["../../../src/basic/List.js"],"names":["List","Component","defaultProps","leftOpenValue","rightOpenValue","closeOnRowBeginSwipe","closeOnScroll","closeOnRowPress","disableLeftSwipe","disableRightSwipe","recalculateHiddenLayout","previewFirstRow","directionalDistanceChangeThreshold","swipeToOpenPercent","props","rowHasChanged","r1","ds","ListView","dataSource","nextProps","childrenArray","React","enable","scrollEnabled","id","secId","rowId","rowMap","cellIdentifier","e","ref","rowData","previewRowId","StyledList","mapPropsToStyleNames"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { ListView, View } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\n\nimport { SwipeRow } from \"./SwipeRow\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\n\nclass List extends Component {\n  static defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowBeginSwipe: false,\n    closeOnScroll: true,\n    closeOnRowPress: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    previewFirstRow: false,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50\n  };\n  constructor(props) {\n    super(props);\n    this._rows = {};\n    this.openCellId = null;\n    if (props.dataArray && props.renderRow) {\n      let rowHasChanged = props.rowHasChanged || ((r1, r2) => r1 !== r2);\n      const ds = new ListView.DataSource({ rowHasChanged: rowHasChanged });\n      this.state = {\n        dataSource: ds.cloneWithRows(props.dataArray)\n      };\n    } else {\n      this.state = {};\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (this.state.dataSource) {\n      this.setState({\n        dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray)\n      });\n    }\n  }\n  renderChildren() {\n    const childrenArray = React.Children.map(\n      this.props.children,\n      child => child\n    );\n\n    return childrenArray;\n  }\n  setScrollEnabled(enable) {\n    this._listView.setNativeProps({ scrollEnabled: enable });\n  }\n\n  safeCloseOpenRow() {\n    // if the openCellId is stale due to deleting a row this could be undefined\n    if (this._rows[this.openCellId]._root) {\n      this._rows[this.openCellId]._root.closeRow();\n    }\n  }\n\n  rowSwipeGestureBegan(id) {\n    if (\n      this.props.closeOnRowBeginSwipe &&\n      this.openCellId &&\n      this.openCellId !== id\n    ) {\n      this.safeCloseOpenRow();\n    }\n  }\n\n  onRowOpen(secId, rowId, rowMap) {\n    const cellIdentifier = `${secId}${rowId}`;\n    if (this.openCellId && this.openCellId !== cellIdentifier) {\n      this.safeCloseOpenRow();\n    }\n    this.openCellId = cellIdentifier;\n    this.props.onRowOpen && this.props.onRowOpen(secId, rowId, rowMap);\n  }\n\n  onRowPress(id) {\n    if (this.openCellId) {\n      if (this.props.closeOnRowPress) {\n        this.safeCloseOpenRow();\n        this.openCellId = null;\n      }\n    }\n  }\n\n  closeRow(id) {\n    if (this.openCellId) {\n      if (this.props.closeOnRowPress) {\n        this.safeCloseOpenRow();\n        this.openCellId = null;\n      }\n    }\n  }\n\n  openLeftRow(id) {\n    this._rows[id]._root.openLeftRow();\n  }\n\n  openRightRow(id) {\n    this._rows[id]._root.openRightRow();\n  }\n\n  onScroll(e) {\n    if (this.openCellId) {\n      if (this.props.closeOnScroll) {\n        this.safeCloseOpenRow();\n        this.openCellId = null;\n      }\n    }\n    this.props.onScroll && this.props.onScroll(e);\n  }\n\n  setRefs(ref) {\n    this._listView = ref;\n    this.props.listViewRef && this.props.listViewRef(ref);\n  }\n\n  renderRow(rowData, secId, rowId, rowMap) {\n    const previewRowId =\n      this.props.dataSource &&\n      this.props.dataSource.getRowIDForFlatIndex(\n        this.props.previewRowIndex || 0\n      );\n    return (\n      <SwipeRow\n        list={true}\n        ref={row => (this._rows[`${secId}${rowId}`] = row)}\n        swipeGestureBegan={_ => this.rowSwipeGestureBegan(`${secId}${rowId}`)}\n        onRowOpen={_ => this.onRowOpen(secId, rowId, this._rows)}\n        onRowDidOpen={_ =>\n          this.props.onRowDidOpen &&\n          this.props.onRowDidOpen(secId, rowId, this._rows)\n        }\n        onRowClose={_ =>\n          this.props.onRowClose &&\n          this.props.onRowClose(secId, rowId, this._rows)\n        }\n        onRowDidClose={_ =>\n          this.props.onRowDidClose &&\n          this.props.onRowDidClose(secId, rowId, this._rows)\n        }\n        onRowPress={_ => this.onRowPress(`${secId}${rowId}`)}\n        openLeftRow={_ => this.openLeftRow(`${secId}${rowId}`)}\n        openRightRow={_ => this.openRightRow(`${secId}${rowId}`)}\n        closeRow={_ => this.closeRow(`${secId}${rowId}`)}\n        setScrollEnabled={enable => this.setScrollEnabled(enable)}\n        leftOpenValue={this.props.leftOpenValue}\n        rightOpenValue={this.props.rightOpenValue}\n        closeOnRowPress={this.props.closeOnRowPress}\n        disableLeftSwipe={this.props.disableLeftSwipe}\n        disableRightSwipe={this.props.disableRightSwipe}\n        stopLeftSwipe={this.props.stopLeftSwipe}\n        stopRightSwipe={this.props.stopRightSwipe}\n        recalculateHiddenLayout={this.props.recalculateHiddenLayout}\n        style={this.props.swipeRowStyle}\n        preview={\n          (this.props.previewFirstRow || this.props.previewRowIndex) &&\n          rowId === previewRowId\n        }\n        previewDuration={this.props.previewDuration}\n        previewOpenValue={this.props.previewOpenValue}\n        tension={this.props.tension}\n        friction={this.props.friction}\n        directionalDistanceChangeThreshold={\n          this.props.directionalDistanceChangeThreshold\n        }\n        swipeToOpenPercent={this.props.swipeToOpenPercent}\n        left={\n          this.props.renderLeftHiddenRow &&\n          this.props.renderLeftHiddenRow(rowData, secId, rowId, this._rows)\n        }\n        right={\n          this.props.renderRightHiddenRow &&\n          this.props.renderRightHiddenRow(rowData, secId, rowId, this._rows)\n        }\n        body={\n          this.props.renderRow &&\n          this.props.renderRow(rowData, secId, rowId, this._rows)\n        }\n      />\n    );\n  }\n  render() {\n    if (this.props.renderLeftHiddenRow || this.props.renderRightHiddenRow) {\n      return (\n        <ListView\n          {...this.props}\n          ref={ref => {\n            this.setRefs(ref);\n            this._root = ref;\n          }}\n          enableEmptySections\n          onScroll={e => this.onScroll(e)}\n          renderRow={(rowData, secId, rowId) =>\n            this.renderRow(rowData, secId, rowId, this._rows)\n          }\n        />\n      );\n    } else if (this.state.dataSource) {\n      return (\n        <ListView\n          {...this.props}\n          ref={ref => (this._root = ref)}\n          enableEmptySections\n          dataSource={this.state.dataSource}\n          renderRow={this.props.renderRow}\n        />\n      );\n    }\n    return (\n      <View ref={c => (this._root = c)} {...this.props}>\n        {this.renderChildren()}\n      </View>\n    );\n  }\n}\nconst StyledList = connectStyle(\"NativeBase.List\", {}, mapPropsToStyleNames)(\n  List\n);\n\nexport { StyledList as List };"]},"metadata":{},"sourceType":"script"}